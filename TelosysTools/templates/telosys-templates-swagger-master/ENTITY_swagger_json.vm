#set ( $uncapitalizedEntityName = ${fn.uncapitalize(${entity.name})} )
## define types affributes
#set ($mapTypeAttributes = {})
#foreach( $field in $entity.attributes )
#if( $field.neutralType == 'int' || $field.neutralType == 'short' || $field.neutralType == 'long' )
#set ( $mapTypeAttributes[${field.name}] = "integer" )
#elseif( $field.neutralType == 'float' || $field.neutralType == 'decimal' )
#set ( $mapTypeAttributes[${field.name}] = "number" )
#elseif( $field.neutralType == 'timestamp' || $field.neutralType == 'date' )
#set ( $mapTypeAttributes[${field.name}] = "string
        format: date-time" )
#else
#set ( $mapTypeAttributes[${field.name}] = ${field.neutralType} )
#end
#end
## define parameters
#set ( $parameters = "" )
#foreach($keyAttribute in $entity.keyAttributes)
#set ( $parameters = $parameters+'          {
            "name": "id",
            "in": "path",
            "description": "id of '+"#if( $keyAttribute.isFK() )${keyAttribute.referencedEntity.name}#else${entity.name}#end"+'"' )
#if( $keyAttribute.isNotNull() ) 
#set ( $parameters = $parameters+',
            "required": true' )
#end
#set ( $parameters = $parameters+',
            "type": "'+"$mapTypeAttributes[${keyAttribute.name}]"+'"' )
#if( ${keyAttribute.databaseSize} > 0 )
#set ( $parameters = $parameters+',
          	"maximum": '+"$keyAttribute.databaseSize" )
#end
#set ( $parameters = $parameters+"
          }#if( $foreach.count > $entity.keyAttributes.size() ),#end" )
#end
## define body parameters
#set ( $bodyParameters = '          {
            "name": "body",
            "in": "body",
            "description": "Valid JSON object",
            "required": true,
            "schema": {
              "'+"${DOLLAR}"+'ref": "#/definitions/'+"${uncapitalizedEntityName}" )
#if( $entity.keyAttributes.size() <= 1 && $entity.keyAttribute.isAutoIncremented() )
#set ( $bodyParameters = $bodyParameters+"NotId" )
#end
#set ( $bodyParameters = $bodyParameters+'"
            }
          }' )
{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "API REST",
    "description": "swagger API description gerator"
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "schemes": [
    "http"
  ],
  "tags": [
    {
      "name": "${entity.name}",
      "description": "Everything about ${entity.name} entity"
    }
  ],
  "paths": {
  	"/${uncapitalizedEntityName}#foreach($keyAttribute in $entity.keyAttributes)/{${keyAttribute.name}}#end": {
      "get": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Get one ${entity.name} with the given id",
        "produces": [
          "application/json"
        ],
        "parameters": [
${parameters}
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "${DOLLAR}ref": "#/definitions/${uncapitalizedEntityName}"
            }
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "404": {
            "${DOLLAR}ref": "#/responses/404"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Update a ${entity.name}",
        "produces": [
          "application/json"
        ],
        "parameters": [
${parameters},
${bodyParameters}
        ],
        "responses": {
          "200": {
            "description": "Successful Update"
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "404": {
            "${DOLLAR}ref": "#/responses/404"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Delete a ${entity.name}",
        "produces": [
          "application/json"
        ],
        "parameters": [
${parameters}
        ],
        "responses": {
          "204": {
            "${DOLLAR}ref": "#/responses/204"
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "404": {
            "${DOLLAR}ref": "#/responses/404"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      }
    },
    "/${uncapitalizedEntityName}": {
      "post": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Create a ${entity.name}",
        "produces": [
          "application/json"
        ],
        "parameters": [
${bodyParameters}
        ],
        "responses": {
          "201": {
            "${DOLLAR}ref": "#/responses/201"
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "409": {
            "${DOLLAR}ref": "#/responses/409"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Save a ${entity.name}",
#if( $entity.keyAttributes.size() <= 1 && !$entity.keyAttribute.isAutoIncremented() )        "description": "Creation if entity not exists (201 created)",
#else        "description": "The entity has key attribute is auto incremented. It's not possible to fill it in.",
#end
        "produces": [
          "application/json"
        ],
        "parameters": [
${bodyParameters}
        ],
        "responses": {
#if( $entity.keyAttributes.size() <= 1 && !$entity.keyAttribute.isAutoIncremented() )
          "200": {
            "description": "Successful Update",
            "schema": {
              "${DOLLAR}ref": "#/definitions/${uncapitalizedEntityName}"
            }
          },
#end
          "201": {
            "${DOLLAR}ref": "#/responses/201"
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      },
      "get": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Get all ${entity.name}s",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "type": "array",
              "items": {
                "${DOLLAR}ref": "#/definitions/${uncapitalizedEntityName}"
              }
            }
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      }
    },
    "/${uncapitalizedEntityName}.count": {
      "get": {
        "tags": [
          "${entity.name}"
        ],
        "summary": "Count all ${entity.name}s",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "${DOLLAR}ref": "#/definitions/count"
            }
          },
          "400": {
            "${DOLLAR}ref": "#/responses/400"
          },
          "500": {
            "${DOLLAR}ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "${uncapitalizedEntityName}": {
      "type": "object",
      "required": [#set ( $haveOne = false )
#foreach( $field in $entity.attributes )
#if( $field.isNotNull() )#if($haveOne),#end
#set ( $haveOne = true  )

        "$field.name"#end
#end

      ],
      "properties": {#set ( $haveOne = false )
#foreach( $field in $entity.attributes )
#if($haveOne),#end
#set ( $haveOne = true  )

        "$field.name": {
          "type": "$mapTypeAttributes[${field.name}]"#if( ${field.databaseSize} > 0 ),
          "maximum": $field.databaseSize#end

        }#end

      }
    },
#if( $entity.keyAttributes.size() <= 1 && $entity.keyAttribute.isAutoIncremented() )
    "${uncapitalizedEntityName}NotId": {
      "type": "object",
      "required": [#set ( $haveOne = false )
#foreach( $field in $entity.attributes )
#if( $field.isNotNull() && !$field.isAutoIncremented() )#if($haveOne),#end
#set ( $haveOne = true  )

        "$field.name"#end
#end

      ],
      "properties": {#set ( $haveOne = false )
#foreach( $field in $entity.attributes )
#if( !$field.isAutoIncremented() )
#if($haveOne),#end
#set ( $haveOne = true  )

        "$field.name": {
          "type": "$mapTypeAttributes[${field.name}]"#if( ${field.databaseSize} > 0 ),
          "maximum": $field.databaseSize
#end
        }#end#end

      }
    },
#end
    "count": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer"
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "error_description": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "201": {
      "description": "Created",
      "schema": {
        "${DOLLAR}ref": "#/definitions/${uncapitalizedEntityName}"
      }
    },
    "204": {
      "description": "Delete successful"
    },
    "400": {
      "description": "Bad request - The query syntax is incorrect"
    },
    "401": {
      "description": "Unauthorized - Authentication required"
    },
    "403": {
      "description": "Forbiden - access forbidden"
    },
    "404": {
      "description": "Not Found - The resource does not exist"
    },
    "405": {
      "description": "Method Not Allowed - Unavailable method or insufficient right"
    },
    "406": {
      "description": "Not acceptable - format not supported"
    },
    "409": {
      "description": "Conflict - already exists"
    },
    "500": {
      "description": "Internal Server Error",
      "schema": {
        "${DOLLAR}ref": "#/definitions/error"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}